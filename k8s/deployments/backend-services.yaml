# User Service
apiVersion: v1
kind: Service
metadata:
  name: user-service
  namespace: microservices
spec:
  type: ClusterIP
  ports:
    - port: 8082
      targetPort: 8082
  selector:
    app: user-service
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: user-service
  namespace: microservices
spec:
  replicas: 2
  selector:
    matchLabels:
      app: user-service
  template:
    metadata:
      labels:
        app: user-service
    spec:
      initContainers:
        - name: wait-for-postgres
          image: busybox:latest
          command: ['sh', '-c', 'until nc -z postgres-0.postgres 5432; do echo waiting for postgres; sleep 2; done']
      containers:
        - name: user-service
          image: your-registry/user-service:latest
          imagePullPolicy: Always
          ports:
            - containerPort: 8082
          envFrom:
            - configMapRef:
                name: common-config
            - configMapRef:
                name: postgres-config
            - configMapRef:
                name: service-urls
          env:
            - name: DB_NAME
              value: "user_service_db"
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: POSTGRES_USER
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: POSTGRES_PASSWORD
---
# Product Service
apiVersion: v1
kind: Service
metadata:
  name: product-service
  namespace: microservices
spec:
  type: ClusterIP
  ports:
    - port: 8083
      targetPort: 8083
  selector:
    app: product-service
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: product-service
  namespace: microservices
spec:
  replicas: 2
  selector:
    matchLabels:
      app: product-service
  template:
    metadata:
      labels:
        app: product-service
    spec:
      initContainers:
        - name: wait-for-postgres
          image: busybox:latest
          command: ['sh', '-c', 'until nc -z postgres-0.postgres 5432; do echo waiting for postgres; sleep 2; done']
      containers:
        - name: product-service
          image: your-registry/product-service:latest
          imagePullPolicy: Always
          ports:
            - containerPort: 8083
          envFrom:
            - configMapRef:
                name: common-config
            - configMapRef:
                name: postgres-config
          env:
            - name: DB_NAME
              value: "product_service_db"
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: POSTGRES_USER
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: POSTGRES_PASSWORD
---
# Cart Service
apiVersion: v1
kind: Service
metadata:
  name: cart-service
  namespace: microservices
spec:
  type: ClusterIP
  ports:
    - port: 8084
      targetPort: 8084
  selector:
    app: cart-service
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cart-service
  namespace: microservices
spec:
  replicas: 2
  selector:
    matchLabels:
      app: cart-service
  template:
    metadata:
      labels:
        app: cart-service
    spec:
      initContainers:
        - name: wait-for-postgres
          image: busybox:latest
          command: ['sh', '-c', 'until nc -z postgres-0.postgres 5432; do echo waiting for postgres; sleep 2; done']
      containers:
        - name: cart-service
          image: your-registry/cart-service:latest
          imagePullPolicy: Always
          ports:
            - containerPort: 8084
          envFrom:
            - configMapRef:
                name: common-config
            - configMapRef:
                name: postgres-config
            - configMapRef:
                name: redis-config
            - configMapRef:
                name: service-urls
          env:
            - name: DB_NAME
              value: "cart_service_db"
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: POSTGRES_USER
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: POSTGRES_PASSWORD
---
# Order Service
apiVersion: v1
kind: Service
metadata:
  name: order-service
  namespace: microservices
spec:
  type: ClusterIP
  ports:
    - port: 8085
      targetPort: 8085
  selector:
    app: order-service
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: order-service
  namespace: microservices
spec:
  replicas: 2
  selector:
    matchLabels:
      app: order-service
  template:
    metadata:
      labels:
        app: order-service
    spec:
      initContainers:
        - name: wait-for-postgres
          image: busybox:latest
          command: ['sh', '-c', 'until nc -z postgres-0.postgres 5432; do echo waiting for postgres; sleep 2; done']
      containers:
        - name: order-service
          image: your-registry/order-service:latest
          imagePullPolicy: Always
          ports:
            - containerPort: 8085
          envFrom:
            - configMapRef:
                name: common-config
            - configMapRef:
                name: postgres-config
            - configMapRef:
                name: kafka-config
            - configMapRef:
                name: service-urls
          env:
            - name: DB_NAME
              value: "order_service_db"
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: POSTGRES_USER
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: POSTGRES_PASSWORD
---
# Warranty Service
apiVersion: v1
kind: Service
metadata:
  name: warranty-service
  namespace: microservices
spec:
  type: ClusterIP
  ports:
    - port: 8086
      targetPort: 8086
  selector:
    app: warranty-service
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: warranty-service
  namespace: microservices
spec:
  replicas: 2
  selector:
    matchLabels:
      app: warranty-service
  template:
    metadata:
      labels:
        app: warranty-service
    spec:
      initContainers:
        - name: wait-for-postgres
          image: busybox:latest
          command: ['sh', '-c', 'until nc -z postgres-0.postgres 5432; do echo waiting for postgres; sleep 2; done']
      containers:
        - name: warranty-service
          image: your-registry/warranty-service:latest
          imagePullPolicy: Always
          ports:
            - containerPort: 8086
          envFrom:
            - configMapRef:
                name: common-config
            - configMapRef:
                name: postgres-config
            - configMapRef:
                name: service-urls
          env:
            - name: DB_NAME
              value: "warranty_service_db"
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: POSTGRES_USER
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: POSTGRES_PASSWORD
---
# Notification Service
apiVersion: v1
kind: Service
metadata:
  name: notification-service
  namespace: microservices
spec:
  type: ClusterIP
  ports:
    - port: 8087
      targetPort: 8087
  selector:
    app: notification-service
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: notification-service
  namespace: microservices
spec:
  replicas: 2
  selector:
    matchLabels:
      app: notification-service
  template:
    metadata:
      labels:
        app: notification-service
    spec:
      initContainers:
        - name: wait-for-postgres
          image: busybox:latest
          command: ['sh', '-c', 'until nc -z postgres-0.postgres 5432; do echo waiting for postgres; sleep 2; done']
      containers:
        - name: notification-service
          image: your-registry/notification-service:latest
          imagePullPolicy: Always
          ports:
            - containerPort: 8087
          envFrom:
            - configMapRef:
                name: common-config
            - configMapRef:
                name: postgres-config
            - configMapRef:
                name: redis-config
            - configMapRef:
                name: kafka-config
          env:
            - name: DB_NAME
              value: "notification_service_db"
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: POSTGRES_USER
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: POSTGRES_PASSWORD
            - name: MAIL_HOST
              valueFrom:
                secretKeyRef:
                  name: mail-secret
                  key: MAIL_HOST
            - name: MAIL_PORT
              valueFrom:
                secretKeyRef:
                  name: mail-secret
                  key: MAIL_PORT
            - name: MAIL_USERNAME
              valueFrom:
                secretKeyRef:
                  name: mail-secret
                  key: MAIL_USERNAME
            - name: MAIL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mail-secret
                  key: MAIL_PASSWORD
---
# Blog Service
apiVersion: v1
kind: Service
metadata:
  name: blog-service
  namespace: microservices
spec:
  type: ClusterIP
  ports:
    - port: 8088
      targetPort: 8088
  selector:
    app: blog-service
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: blog-service
  namespace: microservices
spec:
  replicas: 2
  selector:
    matchLabels:
      app: blog-service
  template:
    metadata:
      labels:
        app: blog-service
    spec:
      initContainers:
        - name: wait-for-postgres
          image: busybox:latest
          command: ['sh', '-c', 'until nc -z postgres-0.postgres 5432; do echo waiting for postgres; sleep 2; done']
      containers:
        - name: blog-service
          image: your-registry/blog-service:latest
          imagePullPolicy: Always
          ports:
            - containerPort: 8088
          envFrom:
            - configMapRef:
                name: common-config
            - configMapRef:
                name: postgres-config
            - configMapRef:
                name: service-urls
          env:
            - name: DB_NAME
              value: "blog_service_db"
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: POSTGRES_USER
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: POSTGRES_PASSWORD
---
# Report Service
apiVersion: v1
kind: Service
metadata:
  name: report-service
  namespace: microservices
spec:
  type: ClusterIP
  ports:
    - port: 8089
      targetPort: 8089
  selector:
    app: report-service
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: report-service
  namespace: microservices
spec:
  replicas: 2
  selector:
    matchLabels:
      app: report-service
  template:
    metadata:
      labels:
        app: report-service
    spec:
      initContainers:
        - name: wait-for-postgres
          image: busybox:latest
          command: ['sh', '-c', 'until nc -z postgres-0.postgres 5432; do echo waiting for postgres; sleep 2; done']
      containers:
        - name: report-service
          image: your-registry/report-service:latest
          imagePullPolicy: Always
          ports:
            - containerPort: 8089
          envFrom:
            - configMapRef:
                name: common-config
            - configMapRef:
                name: postgres-config
            - configMapRef:
                name: service-urls
          env:
            - name: DB_NAME
              value: "report_service_db"
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: POSTGRES_USER
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: POSTGRES_PASSWORD
---
# Media Service
apiVersion: v1
kind: Service
metadata:
  name: media-service
  namespace: microservices
spec:
  type: ClusterIP
  ports:
    - port: 8090
      targetPort: 8090
  selector:
    app: media-service
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: media-service
  namespace: microservices
spec:
  replicas: 2
  selector:
    matchLabels:
      app: media-service
  template:
    metadata:
      labels:
        app: media-service
    spec:
      containers:
        - name: media-service
          image: your-registry/media-service:latest
          imagePullPolicy: Always
          ports:
            - containerPort: 8090
          envFrom:
            - configMapRef:
                name: common-config
          env:
            - name: SERVER_PORT
              value: "8090"
            - name: CLOUDINARY_CLOUD_NAME
              valueFrom:
                secretKeyRef:
                  name: cloudinary-secret
                  key: CLOUDINARY_CLOUD_NAME
            - name: CLOUDINARY_API_KEY
              valueFrom:
                secretKeyRef:
                  name: cloudinary-secret
                  key: CLOUDINARY_API_KEY
            - name: CLOUDINARY_API_SECRET
              valueFrom:
                secretKeyRef:
                  name: cloudinary-secret
                  key: CLOUDINARY_API_SECRET
